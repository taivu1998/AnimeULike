# -*- coding: utf-8 -*-
"""CiteULike - BERT GRADIENT ACCUMULATION (static).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-RKLESrmv8Yow6eSeNGA2CwPdCqZrgor
"""



import pandas as pd
from torch.utils.data import Dataset
import os
import numpy as np
from abc import abstractmethod
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
from typing import List
import torch
from torch.nn import functional as F

import transformers
import torch.nn as nn
import itertools
from torch.utils.data import DataLoader

DEVICE_IDS=[0,1,2,5,6,8]
os.environ['CUDA_VISIBLE_DEVICES']=",".join(list(map(str,DEVICE_IDS)))
device = "cuda:0"
BATCH_SIZE,NUM_WORKERS=100,50


# Commented out IPython magic to ensure Python compatibility.

# %cd 'drive/MyDrive/CS224N Project'

#@title Pretrained models
TRANSFORMER_PRETRAINED_MODELS = {
    'bert-base-uncased': {'tokenizer': transformers.BertTokenizerFast, 'model': transformers.BertModel},
    'distilbert-base-uncased': {'tokenizer': transformers.DistilBertTokenizerFast, 'model': transformers.DistilBertModel},
    'roberta-base': {'tokenizer': transformers.RobertaTokenizer, 'model': transformers.RobertaModel},
    'google/electra-small-discriminator': {'tokenizer': transformers.ElectraTokenizer, 'model': transformers.ElectraModel},
}

#@title TransformerEncoder

class TransformerEncoder(Dataset):
    def __init__(self, items_path, transformer_config='bert-base-uncased', mode="train", featurizer=None):
        super().__init__()
        assert mode=="train" or featurizer 
        self.path = items_path
        self.data = pd.read_csv(self.path, encoding = "ISO-8859-1").loc[:,"raw.title":"raw.abstract"]
        self.num_items = len(self.data)

        if featurizer:
            self.tokenizer=featurizer["tokenizer"]
            self.model=featurizer["model"]
            # self.scaler=featurizer["scaler"]
        else:
            self.dic=self.data.loc[:,['raw.title','raw.abstract']]
            self.transformer_config = transformer_config
            self.tokenizer = TRANSFORMER_PRETRAINED_MODELS[transformer_config]['tokenizer'].from_pretrained(transformer_config)


    @staticmethod
    def get_text(dic):
        titles=dic['raw.title'].values
        abstracts=dic['raw.abstract'].values
        
        text=[str(t)+". "+str(a) for (t,a) in zip(titles,abstracts)]
        return text

    def __len__(self):
        return len(self.data)
    


    def featurize_anime(self,item):


        item_feats = str(item['raw.title'])+". "+str(item['raw.abstract'])
        item_encodings = self.tokenizer(item_feats, return_tensors='pt', padding='max_length', truncation=True, max_length=512)
        input_ids = torch.squeeze(item_encodings['input_ids'])
        attention_mask = torch.squeeze(item_encodings['attention_mask'])
        return input_ids, attention_mask


    def getanime(self, idx):
        item=self.data.iloc[idx]
        return self.featurize_anime(item)

    
    def __getitem__(self, idx):
        return self.getanime(idx)


train_path="data/citeulike/article_data.csv"

rec=TransformerEncoder(train_path, transformer_config='distilbert-base-uncased')

#@title DropoutNet



class DropoutNet(nn.Module):
    def __init__(self, **kwargs):
        super().__init__()
        assert {"item_drop_p","user_drop_p","latent_dim","hidden_dim"}.issubset(set(kwargs.keys()))

        for (k,v) in kwargs.items():
            setattr(self,k,v)
        self.dim=self.latent_dim
        self.V_dict=v_dict
        self.U_dict=u_dict
        # self.item_drop_p=1.0
        # self.user_drop_p=1.0
        self.item_drop=nn.Dropout(self.item_drop_p)
        self.user_drop=nn.Dropout(self.user_drop_p)
        #LAYERS
        self.linear_u=nn.Linear(self.dim,self.hidden_dim)
        self.linear_v=nn.Linear(self.dim,self.hidden_dim)
        self.linear_phi_u=nn.Linear(self.anime_dim,self.hidden_dim)
        self.linear_phi_v=nn.Linear(self.anime_dim,self.hidden_dim)

        activation_options={"relu":nn.ReLU(),"sigmoid":nn.Sigmoid(),"tanh":nn.Tanh(),"identity":nn.Identity()}
        

        self.non_linearity=activation_options[self.activation] if "activation" in kwargs else nn.Identity()
        self.f_u=nn.Linear(2*self.hidden_dim,self.dim)
        self.f_v=nn.Linear(2*self.hidden_dim,self.dim)


    def forward(self,u,v,u_phi,v_phi,y):
        #note we're using ids, not indices
        B=u.shape[0]
        v=self.item_drop(v) #(B,h) 
        u=self.user_drop(u)

        

        u=self.linear_u(u) #(B,h)
        v=self.linear_v(v) #(B,h)
        phi_u=self.linear_phi_u(u_phi) #(B,h) 
        phi_v=self.linear_phi_v(v_phi) #(B,h)
        u=self.non_linearity(u)
        v=self.non_linearity(v)
        phi_u=self.non_linearity(phi_u)
        phi_v=self.non_linearity(phi_v)
        f_u=torch.cat((u,phi_u),axis=1)
        f_v=torch.cat((v,phi_v),axis=1)
        f_u=self.f_u(f_u)#(B,dim)
        f_v=self.f_v(f_v)#(B,dim)
        f_u=self.non_linearity(f_u)
        f_v=self.non_linearity(f_v)
        f_u=f_u.view(B,1,self.dim)
        f_v=f_v.view(B,self.dim,1)
        out=torch.bmm(f_u,f_v)
        # out=self.sigmoid(out)#(B,1,1)
        out=out.view(B,)
        loss=F.mse_loss(out,y)
        return out, loss

#@title TransformerNet

class TransformerNet(nn.Module):

    def __init__(self, transformer_config='bert-base-uncased', finetune=False):
        super(TransformerNet, self).__init__()
        self.transformer_config = transformer_config
        self.finetune = finetune
        # self.tokenizer = TRANSFORMER_PRETRAINED_MODELS[transformer_config]['tokenizer'].from_pretrained(transformer_config)
        self.model = TRANSFORMER_PRETRAINED_MODELS[transformer_config]['model'].from_pretrained(transformer_config, return_dict=True)
        self.model=nn.DataParallel(self.model)
        # self.model = self.model.to(device)
        if finetune:
            self.model.train()
        else:
            self.model.eval()

    def forward(self, v_input_ids, v_attention_mask, u_input_ids, u_attention_mask, num_shows):
        batch_size, max_shows, tokenize_dim = u_input_ids.size()

        v_phi = self.encode(v_input_ids, v_attention_mask)
        embedding_dim = v_phi.size(1)

        u_input_ids = u_input_ids.view(batch_size * max_shows, tokenize_dim)
        u_attention_mask = u_attention_mask.view(batch_size * max_shows, tokenize_dim)
        u_phi = self.encode(u_input_ids, u_attention_mask)
        u_phi = u_phi.view(batch_size, max_shows, -1)
        

        mask = torch.arange(max_shows)[None, :].to(num_shows.device) < num_shows[:, None]
        mask = mask.type(torch.float)
        mask = torch.repeat_interleave(mask[:, :, None], embedding_dim, dim=-1)
        
        u_phi = u_phi * mask
        u_phi = u_phi.sum(dim=1)
        u_phi = u_phi / num_shows[:, None]

        return u_phi, v_phi
    
    def encode(self, input_ids, attention_mask):
        encoding = self.model(input_ids=input_ids, attention_mask=attention_mask)
        # return encoding.last_hidden_state[:, 0, :]
        encoding = encoding.last_hidden_state[:, 0, :]
        # breakpoint()
        means = encoding.mean(dim=1, keepdim=True)
        stds = encoding.std(dim=1, keepdim=True)
        normalized_encoding = (encoding - means) / stds
        return normalized_encoding

#@title DropoutTransformerNet
class DropoutTransformerNet(nn.Module):
    def __init__(self, transformer_config='bert-base-uncased', finetune=False, **kwargs):
        super(DropoutTransformerNet, self).__init__()
        self.encoder = TransformerNet(transformer_config, finetune)
        self.dropoutnet = DropoutNet(**kwargs)
    
    def forward(self, u, v, u_input_ids, u_attention_mask, num_shows, v_input_ids, v_attention_mask, y):
        u_phi, v_phi = self.encoder(v_input_ids, v_attention_mask, u_input_ids, u_attention_mask, num_shows)
        out, loss = self.dropoutnet(u, v, u_phi, v_phi, y)
        return out, loss

#@title Load feats

train_interact_path = "data/citeulike/dropoutnet_data/cold/train.csv"
test_interact_path = "data/citeulike/dropoutnet_data/cold/test.csv"
test_ids_path = "data/citeulike/dropoutnet_data/cold/test_item_ids.csv"
user_path="data/citeulike/dropoutnet_data/trained/cold/WRMF_cold_rank200_reg1_alpha10_iter10.U.txt"
item_path="data/citeulike/dropoutnet_data/trained/cold/WRMF_cold_rank200_reg1_alpha10_iter10.V.txt"

user_vectors = np.loadtxt(user_path)
user_vectors = user_vectors[1:, :]
item_vectors = np.loadtxt(item_path)
item_vectors = item_vectors[1:, :]

num_users = user_vectors.shape[0]
num_items = item_vectors.shape[0]
user_df = user_vectors
item_df = item_vectors

def read_iteraction_data(data_path):
    pref_matrix = np.zeros((num_users, num_items), dtype=np.int)
    user_ids = []
    item_ids = []
    for line in open(data_path):
        arr = line.strip().split(",")
        user_id = int(arr[0]) - 1
        item_id = int(arr[1]) - 1
        user_ids.append(user_id)
        item_ids.append(item_id)
        pref_matrix[user_id, item_id] = 1
    user_ids = sorted(list(set(user_ids)))
    item_ids = sorted(list(set(item_ids)))
    return user_ids, item_ids, pref_matrix

train_user_ids, train_item_ids, train_pref_matrix = read_iteraction_data(train_interact_path)
val_user_ids, val_item_ids, val_pref_matrix = read_iteraction_data(test_interact_path)

train_pref_mask=train_pref_matrix>0.0
val_pref_mask=val_pref_matrix>0.0

#redundant
all_item_ids = range(num_items)
train_item_ids_set=set(all_item_ids) - set(val_item_ids)
train_item_ids = sorted(list(train_item_ids_set))

u_dict=dict(zip(train_user_ids,user_vectors[train_user_ids]))#{user_ind:item_vec}
v_dict=dict(zip(train_item_ids,item_vectors[train_item_ids]))#{anime_ind:item_vec}

#@title get_u_feat

max_shows_per_user = int(max(np.array(train_pref_mask, dtype=np.float).sum(axis=1)))
max_shows_per_user = 5

# all_v_feats=[rec.getanime(i) for i in range(len(item_df))]
# all_v_feats_train = [all_v_feats[i] for i in train_user_ids]
# v_feats=dict(zip(train_user_ids,all_v_feats_train))

all_v_feats=[rec.getanime(i) for i in range(len(item_df))]
all_v_feats_train = [all_v_feats[i] for i in train_item_ids]
v_feats=dict(zip(train_item_ids,all_v_feats_train))

all_u_transforms=[np.average(item_vectors[train_pref_mask[i]],axis=0) for i in range(len(user_df))]
all_u_transforms_train = [all_u_transforms[i] for i in train_user_ids]
u_transforms=dict(zip(train_user_ids,all_u_transforms_train))

tokenizer = transformers.BertTokenizer.from_pretrained('distilbert-base-uncased')
empty_encodings = tokenizer("", return_tensors='pt', padding='max_length', truncation=True, max_length=512)
empty_input_ids = torch.squeeze(empty_encodings['input_ids'])
empty_attention_mask = torch.squeeze(empty_encodings['attention_mask'])

def get_u_feat(i):
    u_input_ids = []
    u_attention_mask = []
    for j, included in enumerate(train_pref_mask[i]):
        if included:
            input_ids, attention_mask = all_v_feats[j]
            u_input_ids.append(input_ids)
            u_attention_mask.append(attention_mask)
        if len(u_input_ids) >= max_shows_per_user:
            break

    num_shows_per_user = len(u_input_ids)
    if num_shows_per_user < max_shows_per_user:
        u_input_ids = u_input_ids + (max_shows_per_user - num_shows_per_user) * [empty_input_ids]
        u_attention_mask = u_attention_mask + (max_shows_per_user - num_shows_per_user) * [empty_attention_mask]
    # else:
    #     u_input_ids = u_input_ids[:max_shows_per_user]
    #     u_attention_mask = u_attention_mask[:max_shows_per_user]
    u_input_ids = torch.stack(u_input_ids)
    u_attention_mask = torch.stack(u_attention_mask)
    return u_input_ids, u_attention_mask, num_shows_per_user
    

all_u_feats=[get_u_feat(i) for i in range(len(user_df))]
all_u_feats_train = [all_u_feats[i] for i in train_user_ids]
u_feats=dict(zip(train_user_ids,all_u_feats_train))

# all_v_feats_val = [all_v_feats[i] for i in val_user_ids]
# val_v_feats=dict(zip(val_user_ids,all_v_feats_val))

all_v_feats_val = [all_v_feats[i] for i in val_item_ids]
val_v_feats=dict(zip(val_item_ids,all_v_feats_val))


#@title CiteULike Data

citeulike_data=pd.read_csv(train_interact_path,names=['user','item'],index_col=False)
citeulike_val_data=pd.read_csv(test_interact_path,names=['user','item'],index_col=False)

# train_item_mask=citeulike_data.item.map(lambda it:it-1 in train_item_ids_set).values
# train_item_mask=np.arange(len(citeulike_data))[train_item_mask]
# val_item_mask=np.arange(len(citeulike_val_data))[val_item_mask]

# len(train_item_mask),len(val_item_mask)

np.max(list(v_dict.keys()))

#@title Standardize variables

# import scipy
# from scipy import stats
# for var_name in ['u_dict','v_dict','val_v_dict']:
#     try:
#         dic=locals()[var_name]
#     except KeyError:
#         print("no",var_name)
#     std_dic={k:np.nan_to_num(stats.zscore(dic[k].tolist())) for k in dic}
#     locals()[var_name]=std_dic
#     print("standardized",var_name)

#@title Save cache
import json 

VAR_NAMES=['u_dict','v_dict','val_v_dict']

def save(vars=[],path="cached/citeulike/"):
    #make sure VAR_NAMES include ['u_dict','v_dict','u_feats','v_feats','u_transforms','val_v_dict','val_v_feats']
    for j in vars:
        try:
            dic=globals()[j]
            with open(path+j+'.json','w') as f:
                dic={k:dic[k].tolist() for k in dic}
                json.dump(dic,f)
        except KeyError:
            print("no",j)

# save(VAR_NAMES)

#@title Load cache
import json
path="cached/citeulike/"
VAR_NAMES=['u_dict','v_dict','val_v_dict']
for j in VAR_NAMES:
    with open(path+j+".json") as f:
        dic=json.load(f)
        locals()[j]={int(float(k)):np.array(dic[k]) for k in dic}

# assert len(v_dict)==8000

#@title CiteULikePosOnly

class CiteULikePosOnly(Dataset):
    def __init__(self,data,u_dict,v_dict,u_feats,v_feats):
        self.data=data
        self.V_dict=v_dict
        self.U_dict=u_dict
        self.V_feats=v_feats 
        self.U_feats=u_feats
        self.V=np.array(list(v_dict.values()))
        self.U=np.array(list(u_dict.values()))
        self.V_phi=list(v_feats.values())
        self.U_phi=list(u_feats.values())
        self.labels=np.dot(self.U,self.V.T)#(num users,num items)
        self.num_users,self.num_items=self.labels.shape
        self.user_ids=list(map(int,u_dict.keys()))
        self.item_ids=list(map(int,v_dict.keys()))#used for neg labels
        self.inv_user_ids=dict(zip(self.user_ids,range(len(self.user_ids))))
        self.inv_item_ids=dict(zip(self.item_ids,range(len(self.item_ids))))
    
    def __getitem__(self,idx): 
        user,item=self.data.iloc[idx].values-1
        u_id,v_id=user,item#already index
        u,v,u_feat,v_feat=self.U_dict[u_id],self.V_dict[v_id],self.U_feats[u_id],self.V_feats[v_id]
        y=self.labels[self.inv_user_ids[user]][self.inv_item_ids[item]]
        return (u,v) + u_feat + v_feat + (y,)

    def __len__(self): 
        return len(self.data)

#@title CiteULikeNegSample

import random
import pdb
class CiteULikeNegSample(CiteULikePosOnly):
    def __init__(self,data,u_dict,v_dict,u_feats,v_feats,neg_thresh=-10,pos_neg_ratio=1.0,row_major=True):
        
        super().__init__(data,u_dict,v_dict,u_feats,v_feats)
        flat_labels=self.labels.reshape((-1,))
        neg_mask=flat_labels<neg_thresh
        print("Neg:",np.sum(neg_mask))
        self.neg_inds=np.arange(len(flat_labels))[neg_mask]
        num_neg=int(len(self.data)*pos_neg_ratio)
        assert num_neg<len(self.neg_inds)
        self.sampled_neg_inds=np.random.choice(self.neg_inds,(num_neg,),replace=False)

        self.row_major=row_major
        self.major_len=self.num_users if row_major else self.num_items
        self.minor_len=self.num_items if row_major else self.num_users
        

    def __getitem__(self,idx):
        #this first exhausts pos samples from super().__getitem__() before 
        #going to negative
        if idx<len(self.data):
            return super().__getitem__(idx)
        else:
            idx=self.sampled_neg_inds[idx-len(self.data)]
    
            major_ind=idx%self.major_len
            minor_ind=random.randrange(self.minor_len)
            inds=[minor_ind,major_ind]
            if self.row_major: inds=inds[::-1]
            user,item=inds
            u_id,v_id=self.user_ids[user],self.item_ids[item]
            u,v,u_feat,v_feat=self.U_dict[u_id],self.V_dict[v_id],self.U_feats[u_id],self.V_feats[v_id]
            y=self.labels[user][item]
            return (u,v) + u_feat + v_feat + (y,)
            
      
    def __len__(self): 
        return len(self.sampled_neg_inds)+len(self.data)

#@title EDA

# import matplotlib.pyplot as plt

# uaid=CiteULikePosOnly(citeulike_data,u_dict,v_dict,u_feats,v_feats)
# labels_=uaid.labels.reshape((-1,))
# mask=np.random.choice(np.arange(len(labels_)),size=(10000,),replace=False)
# plt.hist(labels_[mask],bins=100)

#@title Initialize model
import torch.optim as optim
from torch.optim.lr_scheduler import MultiplicativeLR,LambdaLR
from sklearn.model_selection import ParameterGrid as pg


class MyDataParallel(nn.DataParallel):
    def __getattr__(self, name):
        return getattr(self.module, name)

config={
    "hidden_dim":[100],
    "latent_dim":[200],#FIX
    "anime_dim":[768],#FIX
    "item_drop_p":[0,0.25,0.5,0.75,1],
    "user_drop_p":[0,0.25,0.5,0.75,1]
}

configs=pg(config)

#@title BERT params 
fine_tune_param_names={ 'encoder.model.transformer.layer.5.attention.q_lin.weight',
 'encoder.model.transformer.layer.5.attention.q_lin.bias',
 'encoder.model.transformer.layer.5.attention.k_lin.weight',
 'encoder.model.transformer.layer.5.attention.k_lin.bias',
 'encoder.model.transformer.layer.5.attention.v_lin.weight',
 'encoder.model.transformer.layer.5.attention.v_lin.bias',
 'encoder.model.transformer.layer.5.attention.out_lin.weight',
 'encoder.model.transformer.layer.5.attention.out_lin.bias',
 'encoder.model.transformer.layer.5.sa_layer_norm.weight',
 'encoder.model.transformer.layer.5.sa_layer_norm.bias',
 'encoder.model.transformer.layer.5.ffn.lin1.weight',
 'encoder.model.transformer.layer.5.ffn.lin1.bias',
 'encoder.model.transformer.layer.5.ffn.lin2.weight',
 'encoder.model.transformer.layer.5.ffn.lin2.bias',
 'encoder.model.transformer.layer.5.output_layer_norm.weight',
 'encoder.model.transformer.layer.5.output_layer_norm.bias',
 'dropoutnet.linear_u.weight',
 'dropoutnet.linear_u.bias',
 'dropoutnet.linear_v.weight',
 'dropoutnet.linear_v.bias',
 'dropoutnet.linear_phi_u.weight',
 'dropoutnet.linear_phi_u.bias',
 'dropoutnet.linear_phi_v.weight',
 'dropoutnet.linear_phi_v.bias',
 'dropoutnet.f_u.weight',
 'dropoutnet.f_u.bias',
 'dropoutnet.f_v.weight',
 'dropoutnet.f_v.bias'
}
fine_tune_bert_param_names={ 'encoder.model.transformer.layer.5.attention.q_lin.weight',
 'encoder.model.transformer.layer.5.attention.q_lin.bias',
 'encoder.model.transformer.layer.5.attention.k_lin.weight',
 'encoder.model.transformer.layer.5.attention.k_lin.bias',
 'encoder.model.transformer.layer.5.attention.v_lin.weight',
 'encoder.model.transformer.layer.5.attention.v_lin.bias',
 'encoder.model.transformer.layer.5.attention.out_lin.weight',
 'encoder.model.transformer.layer.5.attention.out_lin.bias',
 'encoder.model.transformer.layer.5.sa_layer_norm.weight',
 'encoder.model.transformer.layer.5.sa_layer_norm.bias',
 'encoder.model.transformer.layer.5.ffn.lin1.weight',
 'encoder.model.transformer.layer.5.ffn.lin1.bias',
 'encoder.model.transformer.layer.5.ffn.lin2.weight',
 'encoder.model.transformer.layer.5.ffn.lin2.bias',
 'encoder.model.transformer.layer.5.output_layer_norm.weight',
 'encoder.model.transformer.layer.5.output_layer_norm.bias'
}
fine_tune_dropoutnet_param_names={
 'dropoutnet.linear_u.weight',
 'dropoutnet.linear_u.bias',
 'dropoutnet.linear_v.weight',
 'dropoutnet.linear_v.bias',
 'dropoutnet.linear_phi_u.weight',
 'dropoutnet.linear_phi_u.bias',
 'dropoutnet.linear_phi_v.weight',
 'dropoutnet.linear_phi_v.bias',
 'dropoutnet.f_u.weight',
 'dropoutnet.f_u.bias',
 'dropoutnet.f_v.weight',
 'dropoutnet.f_v.bias'
}
def get_optimizer(dn):
    fine_tune_params=list(map(lambda x:x[1],filter(lambda x:x[0] in fine_tune_param_names,dn.named_parameters())))
    regular_params=list(map(lambda x:x[1],filter(lambda x:x[0] not in fine_tune_param_names,dn.named_parameters())))
    for regular_param in regular_params:
        regular_param.requires_grad = False
    
    fine_tune_bert_params=list(map(lambda x:x[1],filter(lambda x:x[0] in fine_tune_bert_param_names,dn.named_parameters())))
    for static_param in fine_tune_bert_params:
        static_param.requires_grad=False
    fine_tune_dropoutnet_params=list(map(lambda x:x[1],filter(lambda x:x[0] in fine_tune_dropoutnet_param_names,dn.named_parameters())))
    optimizer=optim.Adam([{'params': fine_tune_dropoutnet_params}],lr=1e-4/8)
    return optimizer

#@title Learning rate adjust
def adjust_learning_rate(optimizer, epoch,rate=0.9):
    """Sets the learning rate to the initial LR decayed by 10 every 30 epochs"""
    lr = (1e-4/8) * (rate ** epoch)
    # optimizer.param_groups[1]['lr'] = lr
    # for param_group in optimizer.param_groups:
    #     param_group['lr'] = lr

#@title Plot
from matplotlib import pyplot as plt

def plot_train(losses,val=False):
    plt.title("{} Loss".format("Validation" if val else "Training"))
    plt.xlabel("Epoch")
    plt.ylabel("Relevance Loss")
    plt.plot(losses)
    plt.show()

#@title Training 

from tqdm import tqdm 
def evaluate(epoch,dn,val_dload,preds=None,tru=None):
    dn.eval()
    with torch.no_grad():
        eval_loss=0.0
        for (j,data) in tqdm(enumerate(val_dload,0)):

            u, v, u_input_ids, u_attention_mask, num_shows, v_input_ids, v_attention_mask, y = data
            v=np.zeros_like(v)
            u, v = torch.tensor(u,dtype=torch.float).to(device), torch.tensor(v,dtype=torch.float).to(device)
            u_input_ids, u_attention_mask, num_shows = u_input_ids.to(device), u_attention_mask.to(device), num_shows.to(device)
            # print(u_scalars.dtype)
            v_input_ids, v_attention_mask = v_input_ids.to(device), v_attention_mask.to(device)
            y = torch.tensor(y,dtype=torch.float).to(device)

            r,loss=dn(u, v, u_input_ids, u_attention_mask, num_shows, v_input_ids, v_attention_mask, y)
            assert r.shape[0]==BATCH_SIZE

            print("loss this epoch:",loss.item())
            eval_loss+=loss.item()
            
        print('[%d] eval loss: %.5f' %(epoch + 1,  eval_loss / (j+1)))
        return eval_loss / (j+1)
            
def train(dn,optimizer,num_epochs=100,cont=-1,num_accumulation_steps=1,save_every=1,save_path=""):
    

    ### PICK UP WHERE IT LEFT OFF
    
    preds=[]
    if os.path.isfile("{}_{}.pt".format(save_path,num_epochs-1)): 
        print("save_path","{}_{}.pt".format(save_path,num_epochs-1),"finished")
        return
    else:
        files=os.listdir(os.path.dirname(save_path))
        print(save_path)
        chkpts=[os.path.isfile("{}_{}.pt".format(save_path,save_every*i+save_every-1)) for i in range(num_epochs//save_every)]
        indmax=len(chkpts)-1-np.argmax(chkpts[::-1])
        if chkpts[indmax]:

            latest_ckpt="{}_{}.pt".format(save_path,save_every*indmax-1)
            cont=save_every*indmax-1
            print("latest ckpt",latest_ckpt)
            dn.load_state_dict(torch.load(latest_ckpt,map_location=device))
            print("continuing at",cont+1,"epoch")
        else:
            cont=-1
            print("training for",save_path)



    for epoch in range(cont+1,num_epochs):
        uaid=CiteULikeNegSample(citeulike_data,u_dict,v_dict,u_feats,v_feats)
        dload=DataLoader(uaid,batch_size=BATCH_SIZE,shuffle=True,num_workers=NUM_WORKERS)
        val_uaid=CiteULikeNegSample(citeulike_val_data,u_dict,val_v_dict,u_feats,val_v_feats)
        val_dload=DataLoader(val_uaid,batch_size=BATCH_SIZE,shuffle=True,num_workers=NUM_WORKERS)

        dn.train(True)
        # data_iter=iter(dload) 
        epoch_loss=0.0
        if epoch >= 1:
            adjust_learning_rate(optimizer, epoch,rate=0.99)
        for (i,data) in tqdm(enumerate(dload,0)):
            
            u, v, u_input_ids, u_attention_mask, num_shows, v_input_ids, v_attention_mask, y = data

            u, v = torch.tensor(u,dtype=torch.float).to(device), torch.tensor(v,dtype=torch.float).to(device)
            u_input_ids, u_attention_mask, num_shows = u_input_ids.to(device), u_attention_mask.to(device), num_shows.to(device)
            v_input_ids, v_attention_mask = v_input_ids.to(device), v_attention_mask.to(device)
            y = torch.tensor(y,dtype=torch.float).to(device)

            r,loss=dn(u, v, u_input_ids, u_attention_mask, num_shows, v_input_ids, v_attention_mask, y)


            with open("{}_batches.txt".format(save_path,epoch),"a+") as f:
                f.write("{}\n".format(loss.item()))



            loss.backward()
            
            if i%num_accumulation_steps==num_accumulation_steps-1:
                optimizer.step()
                optimizer.zero_grad()
                torch.cuda.empty_cache()

            
            # assert i or (not torch.equal(s1.data,s2.data)) # only checks for i=0
            
            epoch_loss+=loss.item()
            
        print('[%d] loss: %.5f' % (epoch + 1, epoch_loss / (i+1)))
        eval_loss=evaluate(epoch,dn,val_dload,preds)
        yield preds,epoch_loss/(i+1),eval_loss

        ###SAVE LATEST EPOCHS, BUT TFIDF TRAINS TOO FAST FOR IT TO SAVE EVERY LOSS
        ###SO JUST IGNORE FOR TFIDF, REMEMBER TO SAVE PLOTS
        with open("{}.txt".format(save_path,epoch),"a+") as f:
            f.write("{},{},{}\n".format(epoch,epoch_loss/(i+1),eval_loss))

        if epoch%save_every==save_every-1:
            torch.save(dn.state_dict(),"{}_{}.pt".format(save_path,epoch))
    

    
def run_experiment(dn,optimizer,num_epochs=100,plot_every=10,save_path=""):
    preds=None;epoch_losses=[];eval_losses=[]
    np.random.seed(0)
    random.seed(0)
  

    for _ in range(num_epochs):
        
        for (preds,t_l,v_l) in train(dn,optimizer,num_epochs,save_path=save_path):
            preds=preds
            epoch_losses.append(t_l)
            eval_losses.append(v_l)
            if len(epoch_losses)%plot_every==1:
                plot_train(epoch_losses)
            if len(epoch_losses)%plot_every==2:
                plot_train(eval_losses,True)

def checkpoint_name_from_config(path,config):
    #USAGE: path="models/tfidf_with_recs/"
    out=""
    for (k,v) in config.items():
        out+="{}={}__".format(k,v)
    out=out.rstrip("__")+".pt"
    return os.path.join(path,out)


###RUN EXPERIMENTS OVER ALL HPARAM CONFIGS
def run_experiments(configs,path="models/citeulike/bert/recs"):
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    for config in configs:
        if config["item_drop_p"]!=config["user_drop_p"]: continue
        save_path=checkpoint_name_from_config(path,config)
        os.makedirs(path,exist_ok=True)
        # SO COLAB PICKS UP WHERE IT LEFT OFF
        
        dn=DropoutTransformerNet(**config)
        # dn=nn.DataParallel(dn)
        dn=dn.to(device)
        optimizer=get_optimizer(dn)
        
        
        run_experiment(dn,optimizer,250,plot_every=3,save_path=save_path)

run_experiments(configs,"models/citeulike/bert/bert_static")

#@title UserAnimeID


class UserAnimeID(Dataset):
    def __init__(self,u_dict,v_dict,u_feats,v_feats):
        self.V_dict=v_dict
        self.U_dict=u_dict
        self.V_feats=v_feats 
        self.U_feats=u_feats
        self.V=np.array(list(v_dict.values()))
        self.U=np.array(list(u_dict.values()))
        self.V_phi=list(v_feats.values())
        self.U_phi=list(u_feats.values())
        self.labels=np.dot(self.U,self.V.T)#(num users,num items)
        self.num_users,self.num_items=self.labels.shape
        self.user_ids=list(map(int,u_dict.keys()))
        self.item_ids=list(map(int,v_dict.keys()))
    
    def __getitem__(self,idx): 
        item=idx%self.num_items 
        user=(idx-item)//self.num_items
        # u_id,v_id=self.user_item_pairs[idx]
        u_id,v_id=self.user_ids[user],self.item_ids[item]
        u,v,u_phi,v_phi=self.U_dict[u_id],self.V_dict[v_id],self.U_feats[u_id],self.V_feats[v_id]
        y=self.labels[user][item]
        return (u,v) + u_phi + v_phi + (y,)

    def __len__(self): 
      return self.num_items * self.num_users

# uaid=UserAnimeID(u_dict,v_dict,u_feats,v_feats)
# val_uaid=UserAnimeID(u_dict,val_v_dict,u_feats,val_v_feats)

#@title SlicedUserAnimeID


class SlicedUserAnimeID(UserAnimeID):
    def __init__(self,u_dict,v_dict,u_feats,v_feats,slice_users=10,slice_items=0):
        super().__init__(u_dict,v_dict,u_feats,v_feats)
        assert slice_users ^ slice_items
        self.slice_users=(slice_users>0)
        self.sliced_users=slice_users
        self.sliced_items=slice_items
        if not self.slice_users:
            self.labels=self.labels.T
    
    def __getitem__(self,idx): 
        prog=idx%(self.num_items if self.slice_users else self.num_users)
        dom=self.num_items if self.slice_users else self.num_users
        passes=(idx-prog)//dom

        item=prog
        if not self.slice_users:
            #swap axis
            idx=passes*self.num_users+prog
            item=passes
        return super().__getitem__(idx)

        
    def __len__(self): 
        return self.num_items*self.sliced_users if self.slice_users else self.num_users*self.sliced_items

#@title Eval
import heapq
def top_inds(relv,k,thresh=None):
    num_users,num_shows=relv.shape
    if thresh is not None:
      inds=[np.arange(num_users)[relv[:,x]>=thresh].tolist() for x in range(num_shows)]
    else:
      inds=[heapq.nlargest(k,np.arange(num_users),lambda i:relv[i][x]) for x in range(num_shows)]
    return inds 

def top_k_recall(val_preds,val_true,k=3,thresh=0.5):
    NUM_USERS,NUM_ITEMS=val_true.shape
    k_rated=np.array(list(map(lambda x:len(x[x>0.0])>=k,val_true.T.values)))
    valid_inds=np.arange(NUM_ITEMS)[k_rated]
    
    relv_preds=val_preds.T[k_rated].T
    relv_true=val_true.iloc[:,k_rated]
    inds=top_inds(relv_true.values,k)
    pred_inds=top_inds(relv_preds,k,thresh)

    score=np.average([(len(true_)-len(set(true_).difference(set(pred_))))/len(set(true_)) for true_,pred_ in zip(inds,pred_inds)])
    pos_preds=np.average([len(pred_inds[i]) for i in range(len(pred_inds))])
    
    return score,pos_preds/NUM_USERS

def top_k_precision(val_preds,val_true,k=3,thresh=0.5):
    NUM_USERS,NUM_ITEMS=val_true.shape
    k_rated=np.array(list(map(lambda x:len(x[x>0.0])>=k,val_true.T.values)))
    valid_inds=np.arange(NUM_ITEMS)[k_rated]
    
    relv_preds=val_preds.T[k_rated].T
    relv_true=val_true.iloc[:,k_rated]
    print("got",relv_true.shape[1])
    inds=top_inds(relv_true.values,k)
    pred_inds=top_inds(relv_preds,k,thresh)
    score=np.average([len(set(pred_).intersection(set(true_)))/len(set(pred_)) for true_,pred_ in zip(inds,pred_inds) if len(set(pred_))>0])

def inv_rank(preds,labels):
    #preds,labels either (num_items) or (num_users)
    ind=np.argmax(labels)
    preds=sorted(np.arange(len(labels)),key=lambda i:preds[i])
    pos=np.argmax(preds==ind)
    return 1./pos

def mean_inv_rank(preds,labels,num_sliced=0):
    assert num_sliced
    preds,labels=np.array(preds),np.array(labels)
    #(sliced_users*num_items) or (sliced_items*num_users)
    num_per=preds.size//num_sliced
    assert num_per*num_sliced==preds.size 
    ans=np.average([inv_rank(preds[num_per*i:num_per*(i+1)],labels[num_per*i:num_per*(i+1)]) for i in range(num_sliced)])
    baseline=2./num_per
    return ans,baseline


def programmatic_recall_plot(preds,val_,mode='recall',st=0.3,fin=0.7,num=3,num_=10,scale=10):
    assert mode in ['recall','precision']
    thresh=0.0
    fig,axs=plt.subplots(1,num,figsize=(3*num,3),sharey=True,sharex=True)

    get=lambda k,b:(np.linspace(st,fin,num_),
            [top_k_recall(preds,val_,k=k,thresh=thresh)[int(b)] if mode=='recall' else 
             top_k_precision(preds,val_,k=k,thresh=thresh)[int(b)] for thresh in np.linspace(st,fin,num_)])
    
    axs[0].set_ylabel("%(Top-K users/items captured)")
    for i in range(num):
        axs[i].set_title('Top-(K={}) {}'.format(scale*(i+1),mode))
        axs[i].set_xlabel('Threshold')
        axs[i].plot(*get(scale*(i+1),0),'k')
        axs[i].plot(*get(scale*(i+1),1),'k--')
    plt.show()

def get_metrics(n_users,n_items):
    assert min(n_users,n_items)==0
    sliced_uaid=SlicedUserAnimeID(u_dict,v_dict,u_feats,v_feats,slice_users=n_users,slice_items=n_items)
    dload=DataLoader(sliced_uaid,batch_size=BATCH_SIZE,num_workers=NUM_WORKERS)
    preds,tru=[],[]
    evaluate(0,dn,dload,preds,tru)
    #(users, num_slice items) for user recall or (items, num_slice_users) for item recall
    if n_items:
        preds__,tru__=np.array(preds).reshape(n_items,-1).T,pref_matrix.iloc[:,:n_items]
    else:
        preds__,tru__=np.array(preds).reshape(n_users,-1).T,pref_matrix.iloc[:n_users].T

    print("top k recall",top_k_recall(preds__,tru__,k=5,thresh=0.0))
    print("mean inv rank",mean_inv_rank(preds,tru,num_sliced=max(n_users,n_items)))
    # programmatic_recall_plot(preds__,tru__,'recall',-1.0,1.0,num=5,num_=100,scale=5)
    np.savetxt('inference/lr_99_preds.txt',preds__,fmt='%s')
    np.savetxt('inference/lr_99_tru.txt',tru__,fmt='%s')
    return preds__,tru__


# preds__,tru__=get_metrics(10,0)

